import discord
from discord.ext import commands
from discord import app_commands
import datetime
import asyncio
import os

OWNER_IDS = [int(id) for id in os.getenv('OWNER_IDS').split(',')]

PRESET_MESSAGES = {
    "maj": {
        "title": "üì¢ Mise √† jour importante du bot",
        "description": (
            "Une mise √† jour importante du bot vient d'√™tre effectu√©e.\n\n"
            "‚ö†Ô∏è **Information importante** : Si vous aviez un ticket ouvert, "
            "celui-ci a √©t√© ferm√©. Merci de r√©ouvrir un nouveau ticket si besoin."
        ),
        "color": discord.Color.blue()
    },
    "maintenance": {
        "title": "üîß Maintenance pr√©vue",
        "description": (
            "Une maintenance du bot est pr√©vue prochainement.\n"
            "Le syst√®me de ticket sera temporairement indisponible pendant cette p√©riode."
        ),
        "color": discord.Color.orange()
    },
    "nouveaute": {
        "title": "‚ú® Nouvelles fonctionnalit√©s",
        "description": (
            "De nouvelles fonctionnalit√©s ont √©t√© ajout√©es au bot !\n"
            "N'h√©sitez pas √† ouvrir un ticket pour les d√©couvrir et poser vos questions.\n"
            "Vous pouvez aller voir les nouveaut√©s avec la commande `/changelog`."
        ),
        "color": discord.Color.green()
    }
}

class MaJ(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(
        name="mp",
        description="Envoie un message pr√©d√©fini aux propri√©taires des serveurs"
    )
    @app_commands.choices(
        type_message=[
            app_commands.Choice(name="Mise √† jour", value="maj"),
            app_commands.Choice(name="Maintenance", value="maintenance"),
            app_commands.Choice(name="Nouveaut√©s", value="nouveaute")
        ]
    )
    @app_commands.check(lambda interaction: interaction.user.id in OWNER_IDS)
    async def mp(
        self, 
        interaction: discord.Interaction, 
        type_message: str
    ):
        await interaction.response.defer(ephemeral=True)
        
        sent_count = 0
        failed_count = 0
        processed_owners = set()

        message_template = PRESET_MESSAGES[type_message]
        embed = discord.Embed(
            title=message_template["title"],
            description=message_template["description"],
            color=message_template["color"],
            timestamp=datetime.datetime.utcnow()
        )
        embed.set_footer(text=f"{self.bot.user.name} fait par XenoXzOFF")

        progress_msg = await interaction.followup.send(
            "‚è≥ Envoi des messages aux propri√©taires en cours...\n‚ö†Ô∏è D√©lai de 25 secondes entre chaque envoi", 
            ephemeral=True
        )

        for guild in self.bot.guilds:
            owner = guild.owner
            if owner and owner.id not in processed_owners and not owner.bot:
                processed_owners.add(owner.id)
                try:
                    dm_channel = await owner.create_dm()
                    await dm_channel.send(embed=embed)
                    sent_count += 1
                    
                    await progress_msg.edit(
                        content=(
                            f"‚è≥ Envoi en cours... ({sent_count} messages envoy√©s)\n"
                            f"‚è∞ Attente de 25 secondes avant le prochain envoi...\n"
                            f"üìä Progression : {sent_count}/{len(self.bot.guilds)} serveurs"
                        )
                    )
                    
                    await asyncio.sleep(25)
                except (discord.Forbidden, discord.HTTPException):
                    failed_count += 1
                    continue

        summary = (
            f"‚úÖ Messages envoy√©s avec succ√®s !\n"
            f"üì® Messages envoy√©s : {sent_count}\n"
            f"‚ùå √âchecs : {failed_count}\n"
            f"üë• Propri√©taires contact√©s : {len(processed_owners)}\n"
            f"üìù Type de message : {type_message}\n"
            f"‚è±Ô∏è Temps total : ~{sent_count * 25} secondes"
        )
        
        await progress_msg.edit(content=summary)

    @app_commands.command(
        name="majmp",
        description="[D√©pr√©ci√©] Utilisez /mp √† la place"
    )
    @app_commands.check(lambda interaction: interaction.user.id in OWNER_IDS)
    async def majmp(self, interaction: discord.Interaction):
        await interaction.response.send_message(
            "‚ö†Ô∏è Cette commande est d√©pr√©ci√©e. Utilisez `/mp` √† la place !",
            ephemeral=True
        )

async def setup(bot):
    await bot.add_cog(MaJ(bot))